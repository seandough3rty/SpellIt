{% extends 'base.html.twig' %}

{% block body %}
    <div class="container">
        <div class="row">
            <div class="header-wrapper">
                <h1>SpellIt</h1>
            </div>
            <div class="jumbotron" style="width: 100%;">
                <div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
                    <div class="btn-group mr-2" id="set-btn-group" role="group" aria-label="language group">
                        {% for set in sets %}
                            <button class="btn btn-success set-btn" role="button" data-setid="{{ set.setID }}">{{ set.languageName }}</button>
                        {% endfor %}
                    </div>
                    <div class="btn-group" role="group" aria-label="add language group">
                        <button type="button" class="btn btn-success" data-toggle="collapse" data-target="#add-language-form" aria-expanded="false">+</button>
                    </div>
                </div>
                <div class="home-wrapper collapse" style="background-color: white; margin: 1%; padding: 1%; border-radius:5px;" id="add-language-form">
                    <div class="home-frame">
                        <div class="input-group mb-3">
                            <input type="text" class="form-control language-name-text" placeholder="Language Name" aria-label="Language Name" aria-describedby="language-add-btn">
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="button" id="language-add-btn">Add Language</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="language-wrapper">
                    {% for set in sets %}
                    <div class="language-frame" id="set{{ set.setID }}" data-setid="{{ set.setID }}">
                        <hr />
                        <h2>{{ set.languageName }}</h2>
                        <h5>Rule Groups: </h5>
                        <div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
                            <div class="btn-group mr-2" id="header-btn-group" role="group" aria-label="header group">
                                {% for header in set.headers %}
                                    <button class="btn btn-success header-btn" role="button" data-headerid="{{ header.headerID }}">{{ header.className }}</button>
                                {% endfor %}
                            </div>
                            <div class="btn-group" role="group" aria-label="add header group">
                                <button class="btn btn-success header-btn" type="button" data-toggle="collapse" data-target="#add-header-form" aria-expanded="false">+</button>
                            </div>
                        </div>
                        <div class="add-header-form-wrapper collapse" style="background-color: white; margin: 1%; padding: 1%; border-radius:5px;" id="add-header-form">
                            <div class="input-group mb-3">
                                <input type="text" class="form-control header-name-text" placeholder="Rule Group name" aria-label="Rule Group Name" aria-describedby="header-add-btn">
                                <div class="input-group-append">
                                    <button class="btn btn-outline-secondary" type="button" id="header-add-btn">Rule Group Name</button>
                                </div>
                            </div>
                            <label class="checkbox-inline"><input type="checkbox" id="cp-check-box" value="">Allow Cross Products?</label>
                            <form>
                                <label class="radio-inline">
                                    <input type="radio" id="prefix-radio-btn" name="optradio" checked>Prefix
                                </label>
                                <label class="radio-inline">
                                    <input type="radio" id="suffix-radio-btn" name="optradio">Suffix
                                </label>
                            </form>
                            <button class="btn btn-primary add-rg-btn" id="add-rg-btn" role="button">Add Rule Group</button>
                        </div>
                        {% for header in set.headers %}
                        <div class="header-wrapper">
                            <div class="header-frame" id="header{{ header.headerID }}" style="width:80%; margin: 10%;" data-headerid="{{ header.headerID }}">
                                <h4>Rules:</h4>
                                <ul class="ruleList">
                                    {% for rule in header.rules %}
                                        <li>Remove {{ rule.strippingChars }} from the {{ header.optionName }} of the word if it ends with {{ rule.conditional }}. Then add {{ rule.affix }}.</li>
                                    {% endfor %}
                                </ul>
                                <button type="button" data-toggle="collapse" data-target="#add-rule-prompt" aria-expanded="false" >Create new Rule</button>
                                <div class="add-rule-prompt collapse" style="background-color: white; margin: 1%; padding: 1%; border-radius:5px;" id="add-rule-prompt">
                                    Remove <input class="strippingCharsPrompt" type="text"> from the
                                    <select class="affix-type">
                                        <option value="PFX">beginning</option>
                                        <option value="SFX">end</option>
                                    </select>
                                    of the word if it ends with <input class="conditionalPrompt" type="text">.
                                    Then add <input class="affixPrompt" type="text">.
                                    <button id="add-rule-btn">Add Rule</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    {% endfor %}
                </div>
                {% endfor %}
            </div>
        </div>
    </div>

{% endblock %}

    {% block stylesheets %}
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
        <style>
            .language-frame{
                display: none;
            }
            .header-frame{
                display: none;
            }
        </style>
    {% endblock %}

    {% block javascripts %}
        <script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.3.1.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>

        <script>
            $(document).on('click','#add-rule-btn',function() {
                var headerID = $(this).closest('.header-frame').data('headerid');
                var strippingChars = $(this).siblings('.strippingCharsPrompt').val();
                var affixType = $('.affix-type').val();
                var affix = $(this).siblings('.affixPrompt').val();
                var conditional = $(this).siblings('.conditionalPrompt').val();

                var postData = '{"headerID":'+headerID+','+
                    '"strippingChars":"'+strippingChars+'",'+
                    '"affix":"'+affix+'",'+
                    '"conditional":"'+conditional+'"}';

                var parser = JSON.parse(postData);
                $.ajax({
                    url: '/ajax/addNewRule',
                    type: 'POST',
                    data: postData,
                    dataType: 'json'
                });

                var newRuleString = "Remove "+strippingChars+" from the "+affixType+" of the word if it ends with "+conditional+". Then add "+affix+".";
                var newListItem = document.createElement("li");
                $(newListItem).html(newRuleString);
                $(this).parent().siblings('.ruleList').append(newListItem);
                $('.add-rule-prompt').collapse('hide');
            });

            $(document).on('click','#language-add-btn',function() {
                var languageName = $(this).parent().siblings('.language-name-text').val();
                var postData = '{"languageName":"'+languageName + '"}';
                var parser = JSON.parse(postData);
                $.ajax({
                    url: '/ajax/createNewSet',
                    type: 'POST',
                    data: postData,
                    dataType: 'json'
                });

                var newTab = document.createElement("button");
                $(newTab).addClass("btn btn-secondary set-btn disabled").html(languageName);
                $('#set-btn-group').append(newTab);
            });

            $(document).on('click','.add-rg-btn',function() {
                var setID = $(this).closest('.language-frame').data('setid');
                var affixType = "SFX";
                var className = $(this).siblings('.input-group').children('.header-name-text').val();
                var crossProduct = $('#cp-check-box').is(':checked');

                if ($('#prefix-radio-btn').is(':checked'))
                    affixType = "PFX";

                var postData = '{"setID":'+setID+','+
                    '"optionName":"'+affixType+'",'+
                    '"className":"'+className+'",'+
                    '"crossProduct":'+crossProduct+'}';

                var parser = JSON.parse(postData);
                $.ajax({
                    url: '/ajax/addNewHeader',
                    type: 'POST',
                    data: postData,
                    dataType: 'json'
                });

                var newTab = document.createElement("button");
                $(newTab).addClass("btn btn-secondary header-btn disabled").html(className);
                $(this).parent().siblings('.btn-toolbar').children('.mr-2').append(newTab);

                $('.add-header-form-wrapper').collapse('hide');
            });

            $(document).on('click','.set-btn',function() {
                var setID = $(this).data("setid");
                var clickedFrameID = 'set'+setID;
                var clickedFrame = $('#'+clickedFrameID);
                if(clickedFrame.css('display') === 'block')
                {
                    $('.language-frame').fadeOut();
                }
                else
                {
                    $('.language-frame').css('display','none');
                    clickedFrame.css('display','block');
                }
            });

            $(document).on('click','.header-btn',function() {
                var headerID = $(this).data("headerid");
                var clickedFrameID = 'header'+headerID;
                var clickedFrame = $('#'+clickedFrameID);
                if(clickedFrame.css('display') === 'block')
                {
                    $('.header-frame').fadeOut();
                }
                else
                {
                    $('.header-frame').css('display','none');
                    clickedFrame.css('display','block');
                }
            });
        </script>
    {% endblock %}
